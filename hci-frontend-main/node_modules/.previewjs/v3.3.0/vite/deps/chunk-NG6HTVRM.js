import {
  require_interopRequireDefault,
  require_typeof,
  require_warning
} from "./chunk-ND66TD2H.js";
import {
  __commonJS
} from "./chunk-6USN2IF2.js";

// node_modules/@material-ui/core/utils/helpers.js
var require_helpers = __commonJS({
  "node_modules/@material-ui/core/utils/helpers.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault();
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.capitalize = capitalize;
    exports.contains = contains;
    exports.findIndex = findIndex;
    exports.find = find;
    exports.createChainedFunction = createChainedFunction;
    var _typeof2 = _interopRequireDefault(require_typeof());
    var _warning = _interopRequireDefault(require_warning());
    function capitalize(string) {
      if (typeof string !== "string") {
        throw new Error("Material-UI: capitalize(string) expects a string argument.");
      }
      return string.charAt(0).toUpperCase() + string.slice(1);
    }
    function contains(obj, pred) {
      return Object.keys(pred).every(function(key) {
        return obj.hasOwnProperty(key) && obj[key] === pred[key];
      });
    }
    function findIndex(arr, pred) {
      var predType = (0, _typeof2.default)(pred);
      for (var i = 0; i < arr.length; i += 1) {
        if (predType === "function" && !!pred(arr[i], i, arr) === true) {
          return i;
        }
        if (predType === "object" && contains(arr[i], pred)) {
          return i;
        }
        if (["string", "number", "boolean"].indexOf(predType) !== -1) {
          return arr.indexOf(pred);
        }
      }
      return -1;
    }
    function find(arr, pred) {
      var index = findIndex(arr, pred);
      return index > -1 ? arr[index] : void 0;
    }
    function createChainedFunction() {
      for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcs[_key] = arguments[_key];
      }
      return funcs.reduce(function(acc, func) {
        if (func == null) {
          return acc;
        }
        true ? (0, _warning.default)(typeof func === "function", "Material-UI: invalid Argument Type, must only provide functions, undefined, or null.") : void 0;
        return function chainedFunction() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          acc.apply(this, args);
          func.apply(this, args);
        };
      }, function() {
      });
    }
  }
});

export {
  require_helpers
};
//# sourceMappingURL=chunk-NG6HTVRM.js.map
